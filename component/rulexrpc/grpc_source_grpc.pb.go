// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: grpc_source.proto

package rulexrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RulexRpc_Work_FullMethodName = "/rulexrpc.RulexRpc/Work"
)

// RulexRpcClient is the client API for RulexRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RulexRpcClient interface {
	Work(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error)
}

type rulexRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRulexRpcClient(cc grpc.ClientConnInterface) RulexRpcClient {
	return &rulexRpcClient{cc}
}

func (c *rulexRpcClient) Work(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, RulexRpc_Work_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulexRpcServer is the server API for RulexRpc service.
// All implementations must embed UnimplementedRulexRpcServer
// for forward compatibility
type RulexRpcServer interface {
	Work(context.Context, *Data) (*Response, error)
	mustEmbedUnimplementedRulexRpcServer()
}

// UnimplementedRulexRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRulexRpcServer struct {
}

func (UnimplementedRulexRpcServer) Work(context.Context, *Data) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (UnimplementedRulexRpcServer) mustEmbedUnimplementedRulexRpcServer() {}

// UnsafeRulexRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RulexRpcServer will
// result in compilation errors.
type UnsafeRulexRpcServer interface {
	mustEmbedUnimplementedRulexRpcServer()
}

func RegisterRulexRpcServer(s grpc.ServiceRegistrar, srv RulexRpcServer) {
	s.RegisterService(&RulexRpc_ServiceDesc, srv)
}

func _RulexRpc_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulexRpcServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulexRpc_Work_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulexRpcServer).Work(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// RulexRpc_ServiceDesc is the grpc.ServiceDesc for RulexRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RulexRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rulexrpc.RulexRpc",
	HandlerType: (*RulexRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Work",
			Handler:    _RulexRpc_Work_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_source.proto",
}
